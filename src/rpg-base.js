const TileAtlas = require('./TileAtlas')
const Game = require('./Game')
const { filterOne } = require('./util')

const HeroEntity = require('./entities/HeroEntity')

const waitUntilLoaded = function(obj) {
  return new Promise((resolve) => {
    obj.addEventListener('load', () => resolve(obj))
  })
}

let tileAtlas
let game

const atlasImage = new Image()
atlasImage.src = './game/atlas.png'

tileAtlas = new TileAtlas(atlasImage, 16)

waitUntilLoaded(atlasImage).then(() => {
  const canvasTarget = document.getElementById('target')
  canvasTarget.width = 256
  canvasTarget.height = 256

  game = new Game(canvasTarget)
  window.game = game

  game.levelmap.tileAtlas = tileAtlas

  game.levelmap.loadFromSaveObj({
    "width":11, "height":6,
    "layers":[
      {"tiles":[
        0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
        0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
        0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
        0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
        0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
        0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
        0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18,
      ],"walls":[]},
      {"tiles":[
        0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x08,
        0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1E, 0x00,
        0x18, 0x1A, 0x1B, 0x1B, 0x1B, 0x1B, 0x1B, 0x1C, 0x18, 0x1E, 0x00,
        0x18, 0x2A, 0x2B, 0x2B, 0x2B, 0x2B, 0x2B, 0x2C, 0x18, 0x1E, 0x00,
        0x18, 0x3A, 0x3B, 0x3B, 0x3B, 0x3B, 0x3B, 0x3C, 0x18, 0x1E, 0x00,
        0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x1E, 0x00,
        0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2D, 0x2E, 0x00,
      ],"walls":[]}
    ]
  })

  game.levelmap.layers[0].entitymap.loadEntityData([
    [HeroEntity, 5, 2]
  ])

  game.levelmap.editMode = true

  const draw = function() {
    const ctx = canvasTarget.getContext('2d')
    ctx.fillStyle = '#25A'
    ctx.fillRect(0, 0, canvasTarget.width, canvasTarget.height)

    const hero = filterOne(
      game.levelmap.layers[0].entitymap.entities, e => e instanceof HeroEntity
    )

    window.hero = hero

    if (game.levelmap.testMode) {
      game.levelmap.scrollX = (
        hero.x - (canvasTarget.width / game.levelmap.tileSize / 2) +
        Math.sin(Date.now() / 500 + 800) * 0.3
      )

      game.levelmap.scrollY = (
        hero.y - (canvasTarget.height / game.levelmap.tileSize / 2) +
        Math.sin(Date.now() / 1000) * 0.3
      )
    }

    game.tick()
    game.draw()

    requestAnimationFrame(draw)
  }

  draw()
})
